name: .NET Build

on:
  push:
    branches: [ "June_Master_Bdawg" ]
  pull_request:
    branches: [ "June_Master_Bdawg" ]

jobs:
  build:
    strategy:
      matrix:
        configuration: [Debug]
    runs-on: windows-latest
    env:
      Solution_Name: PKHeX.sln

    steps:
    - name: Checkout PKHeX-ALL-IN-ONE
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        ref: June_Master_Bdawg

    - name: Install .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Checkout PKHeX.Core
      uses: actions/checkout@v4
      with:
        repository: kwsch/PKHeX
        ref: master
        path: PKHeX

    - name: Build PKHeX.Core
      run: |
        cd PKHeX/PKHeX.Core
        dotnet restore
        dotnet build --configuration ${{ matrix.configuration }} --no-restore -nowarn:8073

    - name: Restore NuGet packages
      run: dotnet restore $env:Solution_Name

    - name: Debug NuGet Package Directory
      shell: pwsh
      run: |
        $NuGetPath = Join-Path -Path $env:USERPROFILE -ChildPath ".nuget\packages"
        Get-ChildItem -Path $NuGetPath -Recurse -Directory | ForEach-Object { Write-Output $_.FullName }

    - name: Replace PKHeX.Core NuGet DLL
      shell: pwsh
      run: |
        $PackageBaseFolder = Join-Path -Path $env:USERPROFILE -ChildPath ".nuget\packages\PKHeX.Core"
        if (Test-Path $PackageBaseFolder) {
          $LatestVersionFolder = Get-ChildItem -Path $PackageBaseFolder -Directory | Sort-Object {[version]$_.Name} -Descending | Select-Object -First 1
          if ($LatestVersionFolder) {
            $NuGetPackageFolder = Join-Path -Path $LatestVersionFolder.FullName -ChildPath "lib\net8.0"
            $PkhexCoreDllSource = Join-Path -Path $env:GITHUB_WORKSPACE -ChildPath "PKHeX/PKHeX.Core/bin/${{ matrix.configuration }}/net8.0/PKHeX.Core.dll"
            $PkhexCoreDllDest = Join-Path -Path $NuGetPackageFolder -ChildPath "PKHeX.Core.dll"
            if (-not (Test-Path $NuGetPackageFolder)) { New-Item -Path $NuGetPackageFolder -ItemType Directory -Force }
            Copy-Item -Path $PkhexCoreDllSource -Destination $PkhexCoreDllDest -Force
            Write-Output "Replaced PKHeX.Core.dll in $NuGetPackageFolder"
          } else {
            Write-Output "No version folder found in $PackageBaseFolder"
          }
        } else {
          Write-Output "PKHeX.Core NuGet package not found at $PackageBaseFolder"
        }

    - name: Build PKHeX-ALL-IN-ONE
      run: dotnet build $env:Solution_Name --configuration ${{ matrix.configuration }} --no-restore

    - name: Publish PKHeX.WinForms for win-x64
      run: dotnet publish PKHeX.WinForms/PKHeX.WinForms.csproj --configuration ${{ matrix.configuration }} --no-restore -r win-x64

    - name: Execute unit tests
      run: dotnet test $env:Solution_Name --configuration ${{ matrix.configuration }}

    - name: Upload PKHeX Executable artifact
      uses: actions/upload-artifact@v4
      with:
        name: PKHeX.Executable
        path: PKHeX.WinForms/bin/${{ matrix.configuration }}/net8.0-windows/win-x64

    - name: Upload Launcher artifacts
      uses: actions/upload-artifact@v4
      with:
        name: TeraFinder.Launcher
        path: TeraFinder.Launcher/bin

    - name: Upload Plugins artifacts
      uses: actions/upload-artifact@v4
      with:
        name: TeraFinder.Plugins
        path: |
          TeraFinder.Plugins/bin
          !TeraFinder.Plugins/bin/${{ matrix.configuration }}/net8.0-windows7.0/PKHeX.Core.dll
          !TeraFinder.Plugins/bin/${{ matrix.configuration }}/net8.0-windows7.0/PKHeX.Drawing.dll
          !TeraFinder.Plugins/bin/${{ matrix.configuration }}/net8.0-windows7.0/PKHeX.Drawing.PokeSprite.dll
